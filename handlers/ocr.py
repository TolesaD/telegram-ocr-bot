# handlers/ocr.py
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from datetime import datetime
import traceback
from utils.image_processing import ocr_processor, performance_monitor
from utils.text_formatter import TextFormatter
import config
import logging
import asyncio
import time

logger = logging.getLogger(__name__)

# Enhanced processing cache with timeout
processing_cache = {}
CACHE_TIMEOUT = 30  # seconds

async def handle_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Production-grade image handler with enhanced performance and reliability"""
    db = context.bot_data.get('db')
    user_id = update.effective_user.id
    message = update.message
    
    if not message.photo:
        await message.reply_text("‚ùå Please send an image containing text.")
        return
    
    # Enhanced concurrent processing prevention
    current_time = time.time()
    if user_id in processing_cache:
        cache_time = processing_cache[user_id]['timestamp']
        if current_time - cache_time < CACHE_TIMEOUT:
            await message.reply_text("‚è≥ Please wait for your current image to finish processing.")
            return
        else:
            # Remove expired cache entry
            processing_cache.pop(user_id, None)
    
    # Get user settings
    try:
        user = db.get_user(user_id) if db else None
        user_settings = user.get('settings', {}) if user else {}
    except Exception as e:
        logger.error(f"Error getting user settings: {e}")
        user_settings = {}
    
    text_format = user_settings.get('text_format', 'plain')
    
    # Mark as processing with enhanced tracking
    processing_cache[user_id] = {
        'timestamp': current_time,
        'message_id': message.message_id
    }
    
    processing_msg = None
    
    try:
        # Send initial processing message
        processing_msg = await message.reply_text(
            "üîÑ *Production OCR Processing Started*\n\n"
            "‚ö° Using advanced AI-powered text extraction\n"
            "üéØ Optimized for accuracy and speed\n"
            "‚è∞ Estimated time: 2-8 seconds",
            parse_mode='Markdown'
        )
        
        start_time = time.time()
        
        # Download image with timeout
        photo = message.photo[-1]
        photo_file = await photo.get_file()
        
        # Show download progress
        await processing_msg.edit_text(
            "üì• *Downloading Image*\n\n"
            "‚ö° Optimizing for OCR processing...",
            parse_mode='Markdown'
        )
        
        photo_bytes = await asyncio.wait_for(
            photo_file.download_as_bytearray(),
            timeout=20.0
        )
        
        # Validate size
        if len(photo_bytes) > config.MAX_IMAGE_SIZE:
            await processing_msg.edit_text(
                "‚ùå *Image Too Large*\n\n"
                "Please send an image smaller than 20MB.\n"
                "üí° Tip: Compress or crop the image first.",
                parse_mode='Markdown'
            )
            return
        
        # Show processing status
        await processing_msg.edit_text(
            "üîç *Advanced Text Extraction*\n\n"
            "‚Ä¢ Preprocessing image for optimal quality\n"
            "‚Ä¢ Analyzing text structure and layout\n"
            "‚Ä¢ Applying multi-language recognition\n"
            "‚Ä¢ Ensuring formatting preservation\n\n"
            "‚è≥ This may take a few seconds...",
            parse_mode='Markdown'
        )
        
        # Extract text with production-grade timeout
        try:
            extracted_text = await asyncio.wait_for(
                ocr_processor.extract_text_optimized(bytes(photo_bytes)),
                timeout=20  # Increased for production processing
            )
            
            processing_time = time.time() - start_time
            performance_monitor.record_request(processing_time)
            
            logger.info(f"‚úÖ Production OCR completed for user {user_id} in {processing_time:.2f}s")
            
        except asyncio.TimeoutError:
            await processing_msg.edit_text(
                "‚è∞ *Processing Timeout*\n\n"
                "The image took too long to process.\n\n"
                "üöÄ *Quick Solutions:*\n"
                "‚Ä¢ Use smaller images (under 2MB)\n"
                "‚Ä¢ Crop to text area only\n"
                "‚Ä¢ Better lighting and contrast\n"
                "‚Ä¢ Clear, non-blurry text\n\n"
                "üîÑ Please try again with an optimized image.",
                parse_mode='Markdown'
            )
            return
        
        # Handle OCR results
        if not extracted_text or any(phrase in extracted_text for phrase in [
            "No readable text", "Error processing", "Processing timeout", "System error"
        ]):
            await processing_msg.edit_text(
                extracted_text if extracted_text else "No readable text found in the image.",
                parse_mode='Markdown'
            )
            return
        
        # Store the original extracted text
        context.user_data[f'original_text_{message.message_id}'] = extracted_text
        
        # Format text based on user preference
        formatted_text = TextFormatter.format_text(extracted_text, text_format)
        
        # Log successful request to database
        try:
            if db:
                db.log_ocr_request({
                    'user_id': user_id,
                    'timestamp': datetime.now(),
                    'format': text_format,
                    'text_length': len(extracted_text),
                    'processing_time': processing_time,
                    'status': 'success',
                    'confidence': getattr(performance_monitor, 'last_confidence', 0)
                })
        except Exception as e:
            logger.error(f"Error logging OCR request: {e}")
        
        # Enhanced response with performance info
        performance_stats = performance_monitor.get_stats()
        
        if text_format == 'html':
            response_text = (
                f"‚úÖ **Text Extraction Complete**\n\n"
                f"üìä *Performance Metrics:*\n"
                f"‚Ä¢ ‚è±Ô∏è Processing Time: {processing_time:.2f}s\n"
                f"‚Ä¢ üìà System Accuracy: {performance_stats.get('avg_confidence', 0):.1f}%\n"
                f"‚Ä¢ üéØ Success Rate: {performance_stats.get('success_rate', 0):.1f}%\n\n"
                f"üìù **Extracted Content (HTML Format):**\n\n"
                f"{formatted_text}"
            )
            parse_mode = 'HTML'
        else:
            response_text = (
                f"‚úÖ **Text Extraction Complete**\n\n"
                f"üìä *Performance Metrics:*\n"
                f"‚Ä¢ ‚è±Ô∏è Processing Time: {processing_time:.2f}s\n"
                f"‚Ä¢ üìà System Accuracy: {performance_stats.get('avg_confidence', 0):.1f}%\n"
                f"‚Ä¢ üéØ Success Rate: {performance_stats.get('success_rate', 0):.1f}%\n\n"
                f"üìù **Extracted Content:**\n\n"
                f"{formatted_text}"
            )
            parse_mode = 'Markdown'
        
        # Handle long messages with smart splitting
        messages = TextFormatter.split_long_message(response_text)
        
        # Enhanced format options with better UX
        keyboard = [
            [
                InlineKeyboardButton("üìÑ Plain Text", callback_data=f"reformat_plain_{message.message_id}"),
                InlineKeyboardButton("üìã HTML Format", callback_data=f"reformat_html_{message.message_id}")
            ],
            [
                InlineKeyboardButton("üîÑ Process Another", callback_data="convert_image"),
                InlineKeyboardButton("üìä View Stats", callback_data="statistics")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if len(messages) > 1:
            # Send first part with buttons
            await processing_msg.edit_text(
                messages[0],
                reply_markup=reply_markup,
                parse_mode=parse_mode
            )
            # Send remaining parts without buttons
            for msg in messages[1:]:
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=msg,
                    parse_mode=parse_mode
                )
        else:
            await processing_msg.edit_text(
                response_text,
                reply_markup=reply_markup,
                parse_mode=parse_mode
            )
        
        logger.info(f"‚úÖ Successfully processed image for user {user_id} - Text length: {len(extracted_text)} chars")
        
    except asyncio.TimeoutError:
        error_msg = (
            "‚è∞ *Processing Timeout*\n\n"
            "The operation took longer than expected.\n\n"
            "‚ö° *Performance Tips:*\n"
            "‚Ä¢ Images under 5MB process faster\n"
            "‚Ä¢ Crop to essential text areas\n"
            "‚Ä¢ High contrast improves speed\n"
            "‚Ä¢ Clear, focused images work best\n\n"
            "üîÑ Please try again with an optimized image."
        )
        if processing_msg:
            await processing_msg.edit_text(error_msg, parse_mode='Markdown')
        else:
            await message.reply_text(error_msg, parse_mode='Markdown')
            
    except Exception as e:
        error_msg = await handle_ocr_error(e)
        if processing_msg:
            await processing_msg.edit_text(error_msg, parse_mode='Markdown')
        else:
            await message.reply_text(error_msg, parse_mode='Markdown')
        
        # Log error to database
        try:
            if db:
                db.log_ocr_request({
                    'user_id': user_id,
                    'timestamp': datetime.now(),
                    'format': text_format,
                    'status': 'error',
                    'error': str(e),
                    'processing_time': time.time() - start_time if 'start_time' in locals() else 0
                })
        except Exception as log_error:
            logger.error(f"Error logging OCR error: {log_error}")
    
    finally:
        # Always remove from processing cache
        processing_cache.pop(user_id, None)

async def handle_ocr_error(error):
    """Enhanced error handling with production-grade user guidance"""
    error_str = str(error)
    logger.error(f"Production OCR Error: {error_str}")
    
    if "OCR system is currently unavailable" in error_str:
        return (
            "‚ùå *OCR System Temporarily Unavailable*\n\n"
            "The text extraction service is currently experiencing issues.\n\n"
            "üîÑ *Please try:*\n"
            "‚Ä¢ Waiting a few moments and trying again\n"
            "‚Ä¢ Sending a different image\n"
            "‚Ä¢ Checking your internet connection\n\n"
            "‚ö° The system should recover automatically shortly."
        )
    elif "timeout" in error_str.lower():
        return (
            "‚è∞ *Processing Timeout*\n\n"
            "The system took too long to process your image.\n\n"
            "üöÄ *Immediate Solutions:*\n"
            "‚Ä¢ Use images under 2MB\n"
            "‚Ä¢ Crop to text area only\n"
            "‚Ä¢ Better lighting conditions\n"
            "‚Ä¢ Higher contrast images\n\n"
            "üîÑ Please try again with an optimized image."
        )
        
    elif "no readable text" in error_str.lower():
        return (
            "üîç *Text Detection Failed*\n\n"
            "The system couldn't find readable text in your image.\n\n"
            "üéØ *Quality Guidelines:*\n"
            "‚Ä¢ Ensure text is clear and focused\n"
            "‚Ä¢ Good lighting reduces errors\n"
            "‚Ä¢ High contrast backgrounds\n"
            "‚Ä¢ Straight, horizontal text\n"
            "‚Ä¢ Avoid heavy compression\n\n"
            "üì∏ *Optimal Image Types:*\n"
            "‚Ä¢ Documents and printed text\n"
            "‚Ä¢ High-quality screenshots\n"
            "‚Ä¢ Well-lit signs or menus"
        )
    elif "language" in error_str.lower() and "not installed" in error_str.lower():
        return (
            "üåç *Language Support*\n\n"
            "The requested language pack is not available.\n\n"
            "‚úÖ *Supported Languages:*\n"
            "‚Ä¢ English (Primary)\n"
            "‚Ä¢ Amharic\n"
            "‚Ä¢ Chinese, Japanese, Korean\n"
            "‚Ä¢ Arabic, Russian, Spanish\n"
            "‚Ä¢ French, German, and more\n\n"
            "The system automatically detects the language."
        )
    elif "memory" in error_str.lower() or "size" in error_str.lower():
        return (
            "üíæ *System Resources*\n\n"
            "The image is too large for processing.\n\n"
            "üìè *Size Limits:*\n"
            "‚Ä¢ Maximum size: 20MB\n"
            "‚Ä¢ Optimal size: Under 5MB\n"
            "‚Ä¢ Best performance: Under 2MB\n\n"
            "üí° Please compress or crop your image."
        )
    else:
        return (
            "‚ùå *System Error*\n\n"
            "An unexpected error occurred during processing.\n\n"
            "üîÑ *Troubleshooting Steps:*\n"
            "1. Try a different image\n"
            "2. Check image quality and size\n"
            "3. Ensure good lighting\n"
            "4. Wait a moment and retry\n\n"
            "‚ö° The system will automatically recover."
        )

async def handle_reformat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Enhanced reformatting with production-grade error handling"""
    query = update.callback_query
    await query.answer()
    
    db = context.bot_data.get('db')
    
    try:
        data = query.data
        parts = data.split('_')
        format_type = parts[1]
        original_message_id = int(parts[2])
        
        logger.info(f"üîÑ Reformatting to {format_type} for message {original_message_id}")
        
        # Show reformatting status
        await query.edit_message_text(
            f"üîÑ Reformatting to {format_type.upper()}...",
            parse_mode='Markdown'
        )
        
        # Get the original text from context
        original_text_key = f'original_text_{original_message_id}'
        
        if original_text_key not in context.user_data:
            await query.edit_message_text(
                "‚ùå *Original Text Not Found*\n\n"
                "The original text is no longer available.\n"
                "Please process the image again.",
                parse_mode='Markdown'
            )
            return
        
        original_text = context.user_data[original_text_key]
        
        if not original_text or len(original_text.strip()) < 2:
            await query.edit_message_text(
                "‚ùå *No Text Available*\n\n"
                "No text is available for reformatting.\n"
                "Please process a new image.",
                parse_mode='Markdown'
            )
            return
        
        # Enhanced reformatting with error handling
        try:
            formatted_text = TextFormatter.format_text(original_text, format_type)
            
            if not formatted_text:
                raise ValueError("Formatted text is empty")
                
        except Exception as format_error:
            logger.warning(f"Formatting failed, using plain text: {format_error}")
            formatted_text = original_text
            format_type = 'plain'  # Fallback to plain text
        
        # Enhanced response based on format type
        if format_type == 'html':
            response_text = (
                f"üìã **Reformatted Text** (HTML Format - Copy Friendly)\n\n"
                f"üí° *Easy to copy and paste into documents*\n\n"
                f"{formatted_text}"
            )
            parse_mode = 'HTML'
        else:
            response_text = (
                f"üìÑ **Reformatted Text** (Plain Format)\n\n"
                f"üí° *Clean and readable text format*\n\n"
                f"{formatted_text}"
            )
            parse_mode = 'Markdown'
        
        # Enhanced keyboard with better UX
        other_format = 'html' if format_type == 'plain' else 'plain'
        other_format_name = 'HTML Format' if format_type == 'plain' else 'Plain Text'
        
        keyboard = [
            [
                InlineKeyboardButton(f"üîÑ {other_format_name}", callback_data=f"reformat_{other_format}_{original_message_id}"),
                InlineKeyboardButton("üì∏ New Image", callback_data="convert_image")
            ],
            [
                InlineKeyboardButton("üìä Statistics", callback_data="statistics"),
                InlineKeyboardButton("‚öôÔ∏è Settings", callback_data="settings")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # Enhanced error handling for message editing
        try:
            await query.edit_message_text(
                response_text,
                reply_markup=reply_markup,
                parse_mode=parse_mode
            )
            logger.info(f"‚úÖ Successfully reformatted to {format_type}")
            
        except Exception as message_error:
            logger.warning(f"Message edit failed, sending new message: {message_error}")
            # Fallback: send as new message
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text=response_text,
                reply_markup=reply_markup,
                parse_mode=parse_mode
            )
        
    except Exception as e:
        logger.error(f"‚ùå Error in reformat: {e}")
        logger.error(f"Traceback: {traceback.format_exc()}")
        
        # Ultimate fallback - show original text
        try:
            original_text = context.user_data.get(f'original_text_{original_message_id}', 'No text available')
            await query.edit_message_text(
                f"‚ùå *Reformatting Error*\n\n"
                f"Showing original text:\n\n"
                f"{original_text}",
                parse_mode='Markdown'
            )
        except Exception as final_error:
            logger.error(f"Final fallback failed: {final_error}")
            await query.edit_message_text(
                "‚ùå *System Error*\n\n"
                "Reformatting failed. Please process the image again.",
                parse_mode='Markdown'
            )

async def handle_convert_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle convert image callback with enhanced messaging"""
    query = update.callback_query
    await query.answer("üì∏ Ready for your image!")
    
    await query.edit_message_text(
        "üì∏ *Ready for Image Processing*\n\n"
        "Send me an image containing text and I'll extract it for you.\n\n"
        "üéØ *For Best Results:*\n"
        "‚Ä¢ Clear, high-quality images\n"
        "‚Ä¢ Good lighting and contrast\n"
        "‚Ä¢ Horizontal text alignment\n"
        "‚Ä¢ Focused, readable text\n\n"
        "üåç *Supported Content:*\n"
        "‚Ä¢ Documents and printed text\n"
        "‚Ä¢ Signs, menus, books\n"
        "‚Ä¢ Screenshots with text\n"
        "‚Ä¢ Photos of text content\n\n"
        "‚ö° *Automatic Features:*\n"
        "‚Ä¢ Multi-language detection\n"
        "‚Ä¢ Format preservation\n"
        "‚Ä¢ Bullet point recognition\n"
        "‚Ä¢ Structure maintenance",
        parse_mode='Markdown'
    )

async def handle_ocr_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show OCR statistics with enhanced metrics"""
    query = update.callback_query
    await query.answer()
    
    try:
        stats = performance_monitor.get_stats()
        db = context.bot_data.get('db')
        user_id = query.from_user.id
        
        # Get user-specific stats if available
        user_stats = {}
        if db:
            try:
                user_stats = db.get_user_stats(user_id)
            except Exception as e:
                logger.error(f"Error getting user stats: {e}")
        
        response_text = (
            "üìä *OCR Performance Statistics*\n\n"
            f"‚Ä¢ ‚è±Ô∏è Average Processing Time: `{stats.get('avg_time', 0):.2f}s`\n"
            f"‚Ä¢ üéØ System Accuracy: `{stats.get('avg_confidence', 0):.1f}%`\n"
            f"‚Ä¢ ‚úÖ Success Rate: `{stats.get('success_rate', 0):.1f}%`\n"
            f"‚Ä¢ üìà Total Requests: `{stats.get('total_requests', 0)}`\n"
        )
        
        # Add user-specific stats if available
        if user_stats:
            response_text += (
                f"\nüë§ *Your Usage:*\n"
                f"‚Ä¢ üìä Your Requests: `{user_stats.get('total_requests', 0)}`\n"
                f"‚Ä¢ üéØ Your Success Rate: `{user_stats.get('success_rate', 0):.1f}%`\n"
                f"‚Ä¢ üìù Recent Activity: `{len(user_stats.get('recent_requests', []))} requests`\n"
            )
        
        response_text += (
            f"\n‚ö° *System Status:*\n"
            f"‚Ä¢ üü¢ Production Ready\n"
            f"‚Ä¢ üîÑ Active Processing\n"
            f"‚Ä¢ üåç Multi-language Support\n"
            f"‚Ä¢ üì∑ Image Optimization\n\n"
            f"üí° *Performance Tips:*\n"
            f"‚Ä¢ Optimal image size: 1-5MB\n"
            f"‚Ä¢ Best format: JPEG/PNG\n"
            f"‚Ä¢ Text should be clearly readable\n"
            f"‚Ä¢ Good lighting improves accuracy"
        )
        
        keyboard = [
            [InlineKeyboardButton("üì∏ Process Image", callback_data="convert_image")],
            [InlineKeyboardButton("üîÑ Refresh Stats", callback_data="statistics")],
            [InlineKeyboardButton("üîô Main Menu", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            response_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"Statistics error: {e}")
        await query.edit_message_text(
            "‚ùå *Statistics Unavailable*\n\n"
            "Performance data is currently unavailable.\n"
            "Please try again later.",
            parse_mode='Markdown'
        )

# OCR callback handler
async def handle_ocr_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle all OCR-related callbacks with enhanced routing"""
    query = update.callback_query
    await query.answer()
    
    callback_data = query.data
    
    try:
        if callback_data.startswith("reformat_"):
            await handle_reformat(update, context)
        elif callback_data == "convert_image":
            await handle_convert_image(update, context)
        elif callback_data == "statistics":
            await handle_ocr_statistics(update, context)
        else:
            await query.edit_message_text(
                "‚ùå *Unknown Command*\n\n"
                "The requested action is not available.\n"
                "Returning to main menu...",
                parse_mode='Markdown'
            )
            # You might want to redirect to main menu here
            
    except Exception as e:
        logger.error(f"Callback handler error: {e}")
        await query.edit_message_text(
            "‚ùå *System Error*\n\n"
            "An error occurred while processing your request.\n"
            "Please try again.",
            parse_mode='Markdown'
        )

# Additional utility functions
def get_processing_status(user_id: int) -> bool:
    """Check if user has active processing"""
    return user_id in processing_cache

def cleanup_old_cache():
    """Clean up old cache entries"""
    current_time = time.time()
    expired_users = [
        user_id for user_id, data in processing_cache.items()
        if current_time - data['timestamp'] > CACHE_TIMEOUT
    ]
    for user_id in expired_users:
        processing_cache.pop(user_id, None)
    
    if expired_users:
        logger.info(f"Cleaned up {len(expired_users)} expired cache entries")

# Periodic cleanup (you can call this from your main app)
async def periodic_cleanup():
    """Periodic cleanup of processing cache"""
    while True:
        await asyncio.sleep(300)  # Every 5 minutes
        cleanup_old_cache()